function output = minWeightMatchingZ(flags,dist,QerrRate, MerrRate)% This function takes as input a set of flags and finds the minimal matchingif length(flags)==0    output = zeros(1,dist^2);    returnendnflags = length(flags(:,1));% Add number of boundary terms equal to the number of flagsbflags = zeros(2*nflags,3);bflags(1:nflags,:) = flags;% Prepare the adjacency matrixadjGraph = zeros((2*nflags)*(2*nflags-1),3);counter = 1;for i = 1:2*nflags    for j = 1:2*nflags        if i ~= j            [pathL,pathC] = shortestPathZ(bflags(i,:),bflags(j,:),dist,QerrRate, MerrRate);            adjGraph(counter,:) = [i,j,-pathL];            counter = counter+1;        end    endendadjGraph;% Find the minimum weight matching using Blossommatching = maxWeightMatching(adjGraph,true);output = zeros(1,dist^2);for i = 1:length(matching)    if matching(i)>i        [pathL,pathC] = shortestPathZ(bflags(i,:),bflags(matching(i),:),dist,QerrRate, MerrRate);        output = mod(output + pathC,2);    endendend