function [pathlength,errorpath] = shortestPathX(flag1, flag2, dist, QerrRate, MerrRate)% This function will compute the shortest path between two syndrome flags% The output is both the length and the path itself in vector format (can be all-zero)% The input is two flags, which follow the following convention:% flag = (x,y,t), for (x,y) position of syndrome and timestep t% t = 0: data boundary, means the flag represents the boundary of the lattice% t = -1; measurement boundary, represents a path for measurement errorscorrection = zeros(dist,dist);if flag1(3) == 0 && flag2(3) == 0    pathlength = 0;    errorpath = reshape(correction,[],1)';    returnendif flag1(3) == 0     if flag2(1)<=(dist+1)/2;        pathlength = flag2(1)-1;        for i = 1:pathlength            if flag2(2) == 1                correction(i,1) = 1;            else                correction(i,flag2(2)-1) = 1;            end        end    else        pathlength = dist+1-flag2(1);        for i = 1:pathlength            if flag2(2) == 1                correction(dist+1-i,1) = 1;            else                correction(dist+1-i,flag2(2)-1) = 1;            end        end    endendif flag2(3) == 0     if flag1(1)<=(dist+1)/2;        pathlength = flag1(1)-1;        for i = 1:pathlength            if flag1(2) == 1                correction(i,1) = 1;            else                correction(i,flag1(2)-1) = 1;            end        end    else        pathlength = dist+1-flag1(1);        for i = 1:pathlength            if flag1(2) == 1                correction(dist+1-i,1) = 1;            else                correction(dist+1-i,flag1(2)-1) = 1;            end        end    endendif flag1(3) > 0 && flag2(3) > 0    xdist = abs(flag1(1)-flag2(1));    ydist = abs(flag1(2)-flag2(2));    tdist = abs(flag1(3)-flag2(3));    pathlength = QerrRate*max(xdist,ydist)+MerrRate*tdist;        if flag1(1) <= flag2(1)        lflag = flag1;        rflag = flag2;    else        lflag = flag2;        rflag = flag1;    end        if lflag(2) < rflag(2)        for i = 1:min(xdist,ydist)            correction(lflag(1)-1+i,lflag(2)-1+i) = 1;        end                if xdist < ydist            for j = 1:(ydist-xdist)                if xdist == 0                    correction(lflag(1),lflag(2)-1+j)=1;                else                    correction(lflag(1)-1+min(xdist,ydist),lflag(2)-1+min(xdist,ydist)+j)=1;                end            end        else            for j = 1:(xdist-ydist)                if ydist == 0                    if lflag(2) == (dist+1)                        correction(lflag(1)-1+j,lflag(2)-1)=1;                    else                        correction(lflag(1)-1+j,lflag(2))=1;                    end                else                    correction(lflag(1)-1+min(xdist,ydist)+j,lflag(2)-1+min(xdist,ydist))=1;                end            end        end            else            for i = 1:min(xdist,ydist)            correction(lflag(1)-1+i,lflag(2)-i) = 1;        end                if xdist < ydist            for j = 1:(ydist-xdist)                if xdist == 0                    correction(lflag(1),lflag(2)-j)=1;                else                    correction(lflag(1)-1+min(xdist,ydist),lflag(2)-min(xdist,ydist)-j)=1;                end            end        else            for j = 1:(xdist-ydist)                if ydist == 0                    if lflag(2) == (dist+1)                        correction(lflag(1)-1+j,lflag(2)-1)=1;                    else                        correction(lflag(1)-1+j,lflag(2))=1;                    end                else                    correction(lflag(1)-1+min(xdist,ydist)+j,lflag(2)-min(xdist,ydist))=1;                end            end        end    end    end correction';errorpath = reshape(correction,[],1)';    end