import numpy as np

class Spec:

    def __init__(self):

        self.d= 3
        self.err_keys= ['X', 'Z']
        self.perp_keys= [('X', 'Z')]

        self.num_syn= 3
        self.syn_size= 4
        self.input_size= 12
        self.num_labels= 2

        self.num_epochs= 3
        self.lstm_input_size = 4

        self.syn_w= 2
        self.syn_h= 2

        # --- d3 surface code generator matrices and look up table ---#

        self.L= {}
        self.L['Z'] = np.matrix([[1,0,0,0,1,0,0,0,1]]).astype(np.int8)
        self.L['X'] = np.matrix([[0,0,1,0,1,0,1,0,0]]).astype(np.int8)

        self.g= {}
        self.g['Z'] = np.matrix([ \
                                [1,0,0,1,0,0,0,0,0], \
                                [0,1,1,0,1,1,0,0,0], \
                                [0,0,0,1,1,0,1,1,0], \
                                [0,0,0,0,0,1,0,0,1]]).astype(np.int8)
        self.g['X'] = np.matrix([ \
                                [1,1,0,1,1,0,0,0,0], \
                                [0,0,0,0,0,0,1,1,0], \
                                [0,1,1,0,0,0,0,0,0], \
                                [0,0,0,0,1,1,0,1,1]]).astype(np.int8)

        self.T= {}
        self.T['X'] = np.matrix([ \
                                [1,0,0,0,0,0,0,0,0], \
                                [0,0,1,0,0,0,0,0,0], \
                                [0,0,0,0,0,0,0,1,0], \
                                [0,0,0,0,0,0,0,0,1]]).astype(np.int8)

        self.T['X'] = np.matrix([ \
                                [0,0,0,1,0,0,0,0,0], \
                                [0,0,0,0,0,0,1,0,0], \
                                [0,1,0,1,0,0,0,0,0], \
                                [0,0,0,0,0,1,0,0,0]]).astype(np.int8)

        self.correctionMat= {}
        self.correctionMat['X'] = np.matrix([ \
                                [0,0,0,0,0,0,0,0,0], \
                                [0,0,0,0,0,0,0,0,1], \
                                [0,0,0,0,0,0,1,0,0], \
                                [0,0,0,0,1,1,0,0,0], \
                                [0,1,0,0,0,0,0,0,0], \
                                [0,0,0,0,0,1,0,0,0], \
                                [0,0,0,0,1,0,0,0,0], \
                                [0,0,0,0,1,0,0,0,1], \
                                [1,0,0,0,0,0,0,0,0], \
                                [1,0,0,0,0,0,0,0,1], \
                                [0,0,0,1,0,0,0,0,0], \
                                [0,0,0,1,0,0,0,0,1], \
                                [1,1,0,0,0,0,0,0,0], \
                                [1,0,0,0,0,1,0,0,0], \
                                [1,0,0,0,1,0,0,0,0], \
                                [0,0,0,1,0,1,0,0,0]]).astype(np.int8)
        self.correctionMat['Z'] = np.matrix([ \
                                [0,0,0,0,0,0,0,0,0], \
                                [0,0,0,0,0,1,0,0,0], \
                                [0,0,1,0,0,0,0,0,0], \
                                [0,1,0,0,1,0,0,0,0], \
                                [0,0,0,0,0,0,1,0,0], \
                                [0,0,0,0,0,0,0,1,0], \
                                [0,0,1,0,0,0,1,0,0], \
                                [0,0,1,0,0,0,0,1,0], \
                                [1,0,0,0,0,0,0,0,0], \
                                [0,0,0,0,1,0,0,0,0], \
                                [0,1,0,0,0,0,0,0,0], \
                                [0,1,0,0,0,1,0,0,0], \
                                [1,0,0,0,0,0,1,0,0], \
                                [1,0,0,0,0,0,0,1,0], \
                                [0,1,0,0,0,0,1,0,0], \
                                [0,1,0,0,0,0,0,1,0]]).astype(np.int8)
